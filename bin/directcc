#!/usr/bin/env node

const esprima          = require('esprima')
    , escodegen        = require('escodegen')
    , estraverse       = require('estraverse')
    , escope           = require('escope')
    , source           = require('ast-declaration-source')
    , astw             = require('astw')
    , getStdin         = require('get-stdin')
    , fs               = require('fs')
    , commandLineArgs  = require('command-line-args')
    , getUsage         = require('command-line-usage')
    ;

// =========================================================================== 

function wrapWithYieldExpression(node) {
  //console.log(node);
  var wrap = {
    type: 'BinaryExpression',
    operator: '*',
    left: {
      type: 'Identifier',
      name: 'yield' },
    right: node
  };
  return wrap;
}

function convertScript(program) {
  var ast = esprima.parse(program);
  astw(ast)(function(){});

  var scopeManager = escope.analyze(ast);
  var currentScope = scopeManager.acquire(ast);
  var declarations = new Set();

  function convertAst(ast) {
    estraverse.replace(ast, {
      enter: function(node, parent) {
        var replacement = node;
        if (!node.visited) {
          if (/CallExpression/.test(node.type) && node.callee.name) {
            var declaration = source(node.callee);
            if (declaration) {
              //console.log(declaration);
              declaration.calls = declaration.calls || [];
              declaration.calls.push(node);
              declarations.add(declaration);
            }

            node.scope = currentScope.block;

            if (/_kehyield_$/.test(node.callee.name)) {
              node.transformed = true;
              currentScope.block.generator = true;
              currentScope.block.kehyield = true;
              replacement = wrapWithYieldExpression(node);
            } else {
              if (declaration && declaration.parent && declaration.parent.kehyield) {
                node.transformed = true;
                currentScope.block.generator = true;
                currentScope.block.kehyield = true;
                replacement = wrapWithYieldExpression(node);
              }
            }
          }
 
          if (/Function/.test(node.type)) {
            currentScope = scopeManager.acquire(node);
          }
      
          node.visited = true;
        }
        return replacement;
      },
      leave: function(node, parent) {
        if (/Function/.test(node.type)) {
          currentScope = currentScope.upper;
        }
      }
    });
  }

  convertAst(ast);

  var changed = true;
  while (changed) {
    changed = false;
    for (var declaration of declarations) {
      var parent = declaration.parent;
      if (parent.kehyield) {
        for (var i = 0; i < declaration.calls.length; i++) {
          var call = declaration.calls[i];
          var callScope = call.scope;
          if (!callScope.kehyield) {
            callScope.kehyield = true;
            callScope.generator = true;
            changed = true;
          }
        }
      }
    }
  }

  var calls = new Set();
  for (var declaration of declarations) {
    if (declaration.parent.kehyield) {
      for (var i = 0; i < declaration.calls.length; i++) {
        var call = declaration.calls[i];
        if (!call.transformed) {
          calls.add(call);
        }
      }
    }
  }

  estraverse.replace(ast, {
    enter: function(node, parent) {
      var replacement = node;
      if (!node.visited2) {
        if (calls.has(replacement)) {
          replacement = wrapWithYieldExpression(replacement);
        }
        node.visited2 = true;
      }
      return replacement;
    }
  });

  //console.log(declarations);

  return escodegen.generate(ast);
}

function handleOutput(options, contents) {
  if (options.output) {
    fs.writeFile(options.output, contents, (err) => {
      if (err) return console.err(err);
    });
  } else {
    console.log(contents);
  }
}

// =========================================================================== 

const optionDefinitions = [
  { name: 'input', alias: 'i', type: String, defaultOption: true },
  { name: 'output', alias: 'o', type: String },
  { name: 'stdin', alias: 'I', type: Boolean },
  { name: 'stdout', alias: 'O', type: Boolean },
  { name: 'help', alias: 'h', type: Boolean }
]

const sections = [
  {
    header: 'atscntrb-keh-direct.js',
    content: 'Processes atscc2js output and converts it to support yieldable functions.'
  },
  {
    header: 'Options',
    optionList: [
      {
        name: 'input',
        alias: 'i',
        defaultOption: true,
        typeLabel: '[underline]{file}',
        description: 'The input to process.'
      },
      {
        name: 'stdin',
        alias: 'I',
        description: 'Take input from stdin.'
      },
      {
        name: 'output',
        alias: 'o',
        typeLabel: '[underline]{file}',
        description: 'The output file.'
      },
      {
        name: 'stdout',
        alias: 'O',
        description: 'Output to stdout.'
      },
      {
        name: 'help',
        alias: 'h',
        description: 'Print this usage guide.'
      }
    ]
  }
]

const options = commandLineArgs(optionDefinitions)

if (options.help) {
  console.log(getUsage(sections));
} else if (options.stdin) {
  getStdin()
    .then((contents) => { handleOutput(options, convertScript(contents)); })
    .catch((err) => { console.err(err); })
} else if (options.input) {
  fs.readFile(options.input, 'utf8', (err, contents) => {
    if (err) return console.log(err);
    handleOutput(options, convertScript(contents));
  });
} else {
  console.log(getUsage(sections));
}

